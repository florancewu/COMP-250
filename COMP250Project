using namespace std;
#include <iostream>

class Polynomial
{
    
public:
    
    Polynomial(); //default constructor
    Polynomial(const Polynomial& poly);//copy constructor
    Polynomial(double coeff[], int num);//parameterized constructor to create arbitrary polynomial
    ~Polynomial(); // destructor
    const Polynomial& operator = (const Polynomial& polyCopy); // sets an array equal to another
    friend const Polynomial operator + (const Polynomial& p1, const Polynomial& p2); // poly + poly
    friend const Polynomial operator + (const double constant, const Polynomial& p1); // const + poly
    friend const Polynomial operator + (const Polynomial& p1, const double constant); // poly + const
    friend const Polynomial operator -(const Polynomial& p1, const Polynomial& p2); // poly - poly
    friend const Polynomial operator -(const double constant, const Polynomial& p1); // const - pouly
    friend const Polynomial operator -(const Polynomial& p1, const double constant); // poly - const
    friend const Polynomial operator * (const Polynomial& p1, const Polynomial& p2); // poly * poly
    friend const Polynomial operator * (const double constant, const Polynomial& p1);// const * poly
    friend const Polynomial operator * (const Polynomial& p1, const double constant); // poly * const
    friend const bool operator > ( const Polynomial& p1, const Polynomial& p2); // checks if greater than in size
    double& polyVal(double x); // evaluates function
    double& operator [] (int element); // finds value of element in array
    friend ostream& operator << (ostream& output, const Polynomial& polyFunc); // prints
    
private:
    
    int size; //keeps track of size of polynomial
    double *coef; //points to dynamic array of coefficents of length
    
};

Polynomial::Polynomial(){ // default constructor
    size = 0;
    coef = NULL;
    
}
Polynomial::Polynomial(double coeff[], int num){ //parameterized constructor
    size = num ;
    coef = new double[size];
    for (int i = 0; i < size; i ++){
        coef[i] = coeff[i];
    }
}
Polynomial::Polynomial(const Polynomial& poly){ // copy constructor
    size = poly.size;
    coef = new double[size];
    for (int i = 0; i < size; i ++){
        coef[i] = poly.coef[i];
    }
}
Polynomial::~Polynomial(){ //destructor
    if(coef != NULL){
        delete[] coef;
}
}
double& Polynomial::polyVal(double x){ //evaluates a polynomial when x = a value
    Polynomial poly;
    int degree = poly.size - 1;
    double sum = 0;
    for (int i = 0; i < poly.size ; i ++){
        sum += poly.coef[i] * pow(x, degree);
        --degree;
    
    }
    
    return sum;
}
//****************************operators**************************


const Polynomial& Polynomial::operator = (const Polynomial& polyCopy){ // sets an array equal to another
    if  (this != &polyCopy){
        if( this ->size != polyCopy.size){
            
        
        this -> size  = polyCopy.size;
        
        // delete callers old mem
            
        delete [] coef;
        
            coef = new double[size];
        }
        
        for (int i=0; i < polyCopy.size; i++){ // sets the elements of one array equal to another
            
            coef[i]=polyCopy.coef[i];
        }
        
    }
    return ( *this);
}

const Polynomial operator + (const Polynomial& p1, const Polynomial& p2){
    
    Polynomial p3;
    delete[] p3.coef; // deletes old mem -- occurs in each operator creating a new array
    p3.coef = new double[p3.size]; //creates new array
    for (int i = 0 ; i < p3.size ; i ++){ // sets each element = 0
        p3.coef[i] = 0;
    }
    if ( p1.size > p2.size){ //checks to see which polynomial is greater in size
        p3.size = p1.size;
        p3.coef[0] = p1.coef[0];
    
        for (int i = 0; i < p2.size ; i++){
            p3.coef[i+1] = p2.coef[i] + p1.coef[i+1] ;
        }
    }
    if ( p2.size > p1.size){
        p3.size = p2.size;
        p3.coef[0] = p2.coef[0];
        for (int i = 0; i < p1.size ; i++){
            p3.coef[i+1] = p2.coef[i+1] + p1.coef[i] ;
        }
    }
    
    else {
        p3.size = p2.size;
        for ( int i = 0; i < p2.size; i++){
            p3.coef[i] = p1.coef[i] + p2.coef[i];
        }
    }
    return p3;
}
const Polynomial operator + (const double constant, const Polynomial& p1){

    
    int n = p1.size-1;
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    p3.size = p1.size;
    for (int i = 0; i < p1.size ; i++){
        p3.coef[i] = p1. coef[i];
    }
    
    p3.coef[n] += constant;
    
    return p3;
}
const Polynomial operator + (const Polynomial& p1, const double constant){
    
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    p3.size = p1.size;
    for (int i = 0; i < p1.size ; i++){
        p3.coef[i] = p1. coef[i];
    }
    int n = p1.size-1;
    for (int i = 0; i < p1.size ; i++){
        p3.coef[i] = p1. coef[i];
    }
    p3.coef[n] +=  constant;
    
    return p3;
}

const Polynomial operator - (const Polynomial& p1, const Polynomial& p2){
    
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    if ( p1.size > p2.size){ // checks to see which polynomial is greater in size
        p3.size = p1.size;
        p3.coef[0] = p1.coef[0];
        for (int i = 0; i < p2.size ; i++){
            p3.coef[i+1] = p2.coef[i] - p1.coef[i+1] ;
        }
    }
    if ( p2.size > p1.size){
        p3.size = p2.size;
        p3.coef[0] = p2.coef[0];
        for (int i = 0; i < p1.size ; i++){
            p3.coef[i+1] = p2.coef[i+1] - p1.coef[i] ;
        }
    }
    
    else {
        p3.size = p2.size;
        for ( int i = 0; i < p2.size; i++){
            p3.coef[i] = p1.coef[i] - p2.coef[i];
        }
    }
        return p3;
}

const Polynomial operator - (const double constant, const Polynomial& p1){
    
    int n = p1.size-1;
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    p3.size = p1.size;
    for (int i = 0; i < p1.size ; i++){
        p3.coef[i] = -1*(p1. coef[i]);
    }
    if ( constant > 0 ){
    p3.coef[n] +=  constant;
    }
    else {
        p3.coef[n] -= constant;
    }
    
    return p3;
}
const Polynomial operator - (const Polynomial& p1, const double constant){
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    
    int n = p1.size-1;
    p3.size = p1.size;
    for (int i = 0; i < p1.size ; i++){
        p3.coef[i] = p1. coef[i];
    }
    
    p3.coef[n] -= constant;
    
    return p3;
}
const Polynomial operator * (const Polynomial& p1, const Polynomial& p2){
    
    int sizeTot = (p1.size + p2.size) - 1;
    
  
    Polynomial p3;
    delete[] p3.coef; // deletes array
    p3.coef = new double[p3.size]; // creates new
    for (int i = 0 ; i < p3.size ; i ++){ // sets each element to 0
        p3.coef[i] = 0;
    }
    p3.size = sizeTot;
  
    if(p1.size > p2.size){

        
    for (int i = 0 ; i <= p1.size; i ++){
      
        for ( int jj = 0 ; jj <= p2.size ; jj++) {
            p3.coef[i+jj] += p1.coef[i]* p2.coef[jj]; 
        }
    }
    }
    
    if(p2.size > p1.size){
        for (int i = 0 ; i <= p2.size ; i ++){
            for ( int jj = 0 ; i <= p1.size ; i++) {
                p3.coef[i+jj] += p1.coef[i] * p2.coef[jj];
    }
        }
    }
    
    return p3;
}
const Polynomial operator * (const double constant, const Polynomial& p1){
    
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    p3.size = p1.size;
    
    for ( int i = 0 ; i < p1.size ; i++){
        p3.coef[i] = p1.coef[i] * constant;
    }
    
    return p3;
}
const Polynomial operator * (const Polynomial& p1, const double constant){
    
    Polynomial p3;
    delete[] p3.coef;
    p3.coef = new double[p3.size];
    for (int i = 0 ; i < p3.size ; i ++){
        p3.coef[i] = 0;
    }
    p3.size = p1.size;
    
    for ( int i = 0 ; i < p1.size ; i++){
        p3.coef[i] = p1.coef[i] * constant;
    }
    
    return p3;
}

const bool operator > (const Polynomial& p1, const Polynomial& p2){ // checks if one is greater than other
    return ( p1.size > p2.size );
}

double& Polynomial::operator [] (int element){
    
    return ( coef[element] );
}


                      
                      

ostream& operator <<(ostream& output, const Polynomial& polyFunc){
    
    int n = polyFunc.size - 1; //degree
    double coefficent;
    
    // Print the highest degree term if the polynomial is not constant
    
    if (n > 0){
        cout << polyFunc.coef[0] << "x^" << n;
        
        // Print the remaining non-constant terms
        
        for (int i = 1; i < polyFunc.size; i++){
            --n;
            coefficent = polyFunc.coef[i];
            
            if (coefficent >= 0){
                output << " + " << coefficent << "x^" << n;
            }
            else {
                
                output << " - " << -1*coefficent << "x^" << n;
            }
            
        }
    }
    return output;
}
int main()
{
    double quad[] = {4, 3, 2, 1 };
    double cubic[] = { 6 , 5, 4 };
    Polynomial q(quad,4 );
    Polynomial c(cubic ,3);
    

    
    cout <<"Polynomial C:"<< c << endl;
    
    cout <<"Polynomial Q:"<< q << endl;
    
    cout <<"Q[2] = " << q[2] << endl;
    
    cout <<"Q + C = " << q + c << endl;
    
    cout <<"Q + 4 = " << q + 4 << endl;
    
    cout <<"4 + Q = " << 4 + q << endl;
    
    cout <<"Q - C = "<< q - c << endl;
    
    cout <<"5- Q = " << 5 - q << endl;
    
    cout <<"Q - 5 = " << q - 5 << endl;
    
    cout <<"Q * C = "<< q * c << endl;
    
    cout <<"6 * Q = " << 6 * q << endl;
    
    cout <<"Q * 5 ="<< q * 5 << endl;

    return 0;

}
