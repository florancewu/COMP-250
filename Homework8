#include <iostream>
#include <cmath>
using namespace std;

class vector2D {
public:
    
    vector2D(); // default constructor
    
    vector2D(double yVal, double xVal); // constructor
    
    double magnitude() const; // calc magnitude
    
    double getX() const; // accessor
    
    double getY()const; // accessor
    
    friend const bool operator == (const vector2D &a , const vector2D &b); //gives direct access x and y
    friend const bool operator != (const vector2D &a , const vector2D &b);
    friend const vector2D operator + (const vector2D &a , const vector2D &b);
    friend const vector2D operator - (const vector2D &a , const vector2D &b);
    friend const vector2D operator * (const vector2D &a , const vector2D &b);
    friend const vector2D operator - (const vector2D &vect);
    
    void print(); //prints vector
    
    
private:
    double x;
    double y;
    
};

vector2D::vector2D(){
    x = 0;
    y = 0;
}

vector2D::vector2D(double yVal, double xVal){
    x = xVal ;
    y = yVal;
}

double vector2D::getX() const{
    return x;
}

double vector2D::getY() const{
    return y;
}
double vector2D::magnitude() const{
    double magn;
    magn = sqrt((pow(x,2) + pow(y,2)));
    return magn;
}
void vector2D::print(){
    cout << x << "i";
    if (y > 0) {
        cout << " + " << y ;
    }
    else {
        cout << "-" << y ;
    }
    cout << "j" << endl;
}
//*****************non-member overload operators***********************

const vector2D operator + (const vector2D &a , const vector2D &b){
    
    double iDir= a.x + b.x;
    double jDir = a.y+ b.y;
    
    vector2D sum(iDir, jDir);
    
    return sum;
}
const vector2D operator - (const vector2D &a , const vector2D &b){
    
    double iDir= a.x - b.x;
    double jDir = a.y- b.y;
    
    vector2D sum(iDir, jDir);
    
    return sum;
}
const bool operator == (const vector2D &a , const vector2D &b){
    
    return(a.x==b.x && a.y==b.y);
    
}
const bool operator != (const vector2D &a , const vector2D &b){
    return !(a.x==b.x and a.y==b.y);
}

const bool operator > (const vector2D &a , const vector2D &b){
    return (abs(a.magnitude()) > abs(b.magnitude()));
}
const bool operator < (const vector2D &a , const vector2D &b){
    return (abs(a.magnitude()) < abs(b.magnitude()));
}

const vector2D operator * (const vector2D &a , const vector2D &b){
    double iProduct = a.x * b.x;
    double jProduct = a.y * b.y;
    
    vector2D product( iProduct, jProduct);
    
    return product;
}
const vector2D operator - (const vector2D &vect){
    double oppX = 0 - (vect.x);
    double oppY = 0 - (vect.y);
    
    vector2D negation( oppX , oppY);
    return negation;
    
}
int main(){
    
    vector2D A(3 , 4);
    
    vector2D B(-1 , -3);
    vector2D C = A + B ;
    
    cout << "The sum of the two vectors is : " ; // sum operator
    C.print() ;
    cout << endl;
    
    C = A - B; // difference operator
    cout << "The difference of the two vectors is : " ;
    C.print();
    cout << endl;
    
    C = A * B;
    cout << "The dot product of the two vectors is :" ;
    C.print();
    cout << endl;
